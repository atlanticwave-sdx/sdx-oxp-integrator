""" topology model """
# coding: utf-8

from __future__ import absolute_import

import re
from datetime import datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from models.base_model_ import Model
from models.link import Link  # noqa: E501
from models.node import Node  # noqa: E501
from utils import util


class Topology(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        topology_id=None,
        name=None,
        version=None,
        model_version=None,
        time_stamp=None,
        oxpo_url=None,
        nodes=None,
        links=None,
    ):  # noqa: E501
        """Topology - a model defined in OpenAPI

        :param topology_id: The topology_id of this Topology.  # noqa: E501
        :type topology_id: str
        :param name: The name of this Topology.  # noqa: E501
        :type name: str
        :param version: The version of this Topology.  # noqa: E501
        :type version: int
        :param model_version: The model_version of this Topology.  # noqa: E501
        :type model_version: str
        :param time_stamp: The time_stamp of this Topology.  # noqa: E501
        :type time_stamp: datetime
        :param nodes: The nodes of this Topology.  # noqa: E501
        :type nodes: List[Node]
        :param links: The links of this Topology.  # noqa: E501
        :type links: List[Link]
        """
        self.openapi_types = {
            "topology_id": str,
            "name": str,
            "version": int,
            "model_version": str,
            "time_stamp": datetime,
            "oxpo_url": str,
            "nodes": List[Node],
            "links": List[Link],
        }

        self.attribute_map = {
            "topology_id": "topology_id",
            "name": "name",
            "version": "version",
            "model_version": "model_version",
            "time_stamp": "time_stamp",
            "oxpo_url": "oxpo_url",
            "nodes": "nodes",
            "links": "links",
        }

        self._topology_id = topology_id
        self._name = name
        self._version = version
        self._model_version = model_version
        self._time_stamp = time_stamp
        self._oxpo_url = oxpo_url
        self._nodes = nodes
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> "Topology":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The topology of this Topology.  # noqa: E501
        :rtype: Topology
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topology_id(self):
        """Gets the topology_id of this Topology.


        :return: The topology_id of this Topology.
        :rtype: str
        """
        return self._topology_id

    @topology_id.setter
    def topology_id(self, topology_id):
        """Sets the topology_id of this Topology.


        :param topology_id: The topology_id of this Topology.
        :type topology_id: str
        """
        if topology_id is None:
            raise ValueError(
                "Invalid value for `topology_id`, must not be `None`"
            )  # noqa: E501
        if topology_id is not None and not re.search(
            r"^((urn:sdx:topology:)[A-Za-z_.-]*$)", topology_id
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `topology_id`, must be a follow pattern or equal to `/^((urn:sdx:topology:)[A-Za-z_.-]*$)/`"
            )  # noqa: E501

        self._topology_id = topology_id

    @property
    def name(self):
        """Gets the name of this Topology.


        :return: The name of this Topology.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Topology.


        :param name: The name of this Topology.
        :type name: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501
        if name is not None and len(name) > 30:
            raise ValueError(
                "Invalid value for `name`, length must be less than or equal to `30`"
            )  # noqa: E501
        if name is not None and len(name) < 3:
            raise ValueError(
                "Invalid value for `name`, length must be greater than or equal to `3`"
            )  # noqa: E501
        if name is not None and not re.search(r"^[A-Za-z_.-]*$", name):  # noqa: E501
            raise ValueError(
                "Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z_.-]*$/`"
            )  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this Topology.


        :return: The version of this Topology.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Topology.


        :param version: The version of this Topology.
        :type version: int
        """
        if version is None:
            raise ValueError(
                "Invalid value for `version`, must not be `None`"
            )  # noqa: E501

        self._version = version

    @property
    def model_version(self):
        """Gets the model_version of this Topology.


        :return: The model_version of this Topology.
        :rtype: str
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this Topology.


        :param model_version: The model_version of this Topology.
        :type model_version: str
        """
        if model_version is None:
            raise ValueError(
                "Invalid value for `model_version`, must not be `None`"
            )  # noqa: E501

        self._model_version = model_version

    @property
    def time_stamp(self):
        """Gets the time_stamp of this Topology.


        :return: The time_stamp of this Topology.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this Topology.


        :param time_stamp: The time_stamp of this Topology.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError(
                "Invalid value for `time_stamp`, must not be `None`"
            )  # noqa: E501

        self._time_stamp = time_stamp

    @property
    def oxpo_url(self):
        """Gets the oxpo_url of this Topology.


        :return: The oxpo_url of this Topology.
        :rtype: str
        """
        return self._oxpo_url

    @oxpo_url.setter
    def oxpo_url(self, oxpo_url):
        """Sets the oxpo_url of this Topology.


        :param oxpo_url: The oxpo_url of this Topology.
        :type oxpo_url: str
        """
        if oxpo_url is None:
            raise ValueError(
                "Invalid value for `oxpo_url`, must not be `None`"
            )  # noqa: E501

        self._oxpo_url = oxpo_url

    @property
    def nodes(self):
        """Gets the nodes of this Topology.


        :return: The nodes of this Topology.
        :rtype: List[Node]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Topology.


        :param nodes: The nodes of this Topology.
        :type nodes: List[Node]
        """
        if nodes is None:
            raise ValueError(
                "Invalid value for `nodes`, must not be `None`"
            )  # noqa: E501

        self._nodes = nodes

    @property
    def links(self):
        """Gets the links of this Topology.


        :return: The links of this Topology.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Topology.


        :param links: The links of this Topology.
        :type links: List[Link]
        """
        if links is None:
            raise ValueError(
                "Invalid value for `links`, must not be `None`"
            )  # noqa: E501

        self._links = links
